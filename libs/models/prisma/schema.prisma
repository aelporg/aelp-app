// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("MAIN_DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  output          = "../../../node_modules/.prisma/client"
  binaryTargets   = ["linux-musl", "native"]
  previewFeatures = ["interactiveTransactions"]
}

generator nestgraphql {
  provider = "prisma-nestjs-graphql"
  output   = "../src/.generated/graphql"
  reExport = All
}

// --------------------
// --- USER RELATED ---
// --------------------

model User {
  id                    String                   @id @default(uuid())
  firstName             String?
  lastName              String?
  userName              String                   @unique
  email                 String                   @unique
  /// @HideField()
  password              String?
  country               Country                  @relation(fields: [countryId], references: [id], name: "user_country")
  countryId             String
  refreshTokens         UserRefreshToken[]       @relation("user_refreshTokens")
  role                  Role                     @default(USER)
  updatedAt             DateTime                 @updatedAt
  createdAt             DateTime                 @default(now())
  linkedAccounts        LinkedAccount[]          @relation("user_linkedAccounts")
  joinedClassrooms      ClassroomMember[]        @relation("user_classroomMembers")
  assessmentAnswers     AssessmentAnswer[]
  envirnmentPermissions EnvironmentPermission[]
  competitionsJoined    CompetitionParticipant[]
  createdCompetitions   Competition[]
}

enum Role {
  ADMIN
  USER
}

model UserRefreshToken {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], name: "user_refreshTokens")
  userId     String
  token      String   @unique
  expiryDate DateTime
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())
}

model LinkedAccount {
  user       User     @relation(fields: [userId], references: [id], name: "user_linkedAccounts")
  userId     String
  provider   Provider @relation("provider_linkedAccounts", fields: [providerId], references: [id])
  providerId String
  externalId String   @unique
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())


  @@id([userId, providerId])
}

model Provider {
  id             String          @id @default(uuid())
  name           String          @unique
  linkedAccounts LinkedAccount[] @relation(name: "provider_linkedAccounts")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Country {
  id           String   @id @default(uuid())
  countryName  String   @unique
  countryCode  String   @unique
  flagImageUrl String
  users        User[]   @relation("user_country")
  updatedAt    DateTime @updatedAt
  createdAt    DateTime @default(now())
}

// -------------------------
// --- CLASSROOM RELATED ---
// -------------------------
model Classroom {
  id                           String                        @id @default(uuid())
  name                         String
  subject                      String?
  section                      String?
  inviteCode                   String                        @unique
  updatedAt                    DateTime                      @updatedAt
  createdAt                    DateTime                      @default(now())
  members                      ClassroomMember[]             @relation("classroom_members")
  assessments                  Assessment[]
  practiceProgrammingQuestions PracticeProgrammingQuestion[]
  announcements                ClassroomAnnouncements[]
}

model ClassroomAnnouncements {
  id          String                 @id @default(uuid())
  classroom   Classroom              @relation(fields: [classroomId], references: [id])
  classroomId String
  content     String
  attachments AnnoucmentAttachment[]
}

model AnnoucmentAttachment {
  id                      String                 @id @default(uuid())
  fileName                String
  file                    Bytes
  classroomAnnouncement   ClassroomAnnouncements @relation(fields: [classroomAnnouncementId], references: [id])
  classroomAnnouncementId String
}

model ClassroomMember {
  classroom     Classroom     @relation(fields: [classroomId], references: [id], name: "classroom_members")
  classroomId   String
  user          User          @relation(fields: [userId], references: [id], name: "user_classroomMembers")
  userId        String
  classroomRole ClassroomRole
  updatedAt     DateTime      @updatedAt
  createdAt     DateTime      @default(now())

  @@id([classroomId, userId])
}

enum ClassroomRole {
  OWNER
  STUDENT
  INSTRUCTOR
  TA
}

// --------------------------
// --- ASSESSMENT RELATED ---
// --------------------------

model Assessment {
  id             String             @id @default(uuid())
  title          String
  description    String
  assessmentType AssessmentType
  questions      Question[]         @relation("assessment_questions")
  startTime      DateTime           @default(now())
  endTime        DateTime?
  submitAfterEnd Boolean            @default(false)
  totalPoints    Int                @default(0)
  classroom      Classroom?         @relation(fields: [classroomId], references: [id])
  classroomId    String?
  updatedAt      DateTime           @updatedAt
  createdAt      DateTime           @default(now())
  answers        AssessmentAnswer[]
  competition    Competition?       @relation(fields: [competitionId], references: [id])
  competitionId  String?            @unique
}

enum AssessmentType {
  EXAM
  ASSIGNMENT
}

model Question {
  id                       String                  @id @default(uuid())
  questionType             QuestionType
  points                   Int
  multipleChoiceQuestion   MultipleChoiceQuestion? @relation(name: "question_multipleChoiceQuestion", fields: [multipleChoiceQuestionId], references: [id])
  multipleChoiceQuestionId String?                 @unique
  programmingQuestion      ProgrammingQuestion?    @relation(name: "question_programmingQuestion", fields: [programmingQuestionId], references: [id])
  programmingQuestionId    String?                 @unique
  assessment               Assessment?             @relation(fields: [assessmentId], references: [id], name: "assessment_questions")
  assessmentId             String?
  updatedAt                DateTime                @updatedAt
  createdAt                DateTime                @default(now())
  answers                   QuestionAnswer[]        @relation("question_submission")
}

enum QuestionType {
  MULTIPLE_CHOICE
  PROGRAMMING
}

model MultipleChoiceQuestion {
  id           String                         @id @default(uuid())
  description  String
  choices      MultipleChoiceQuestionChoice[] @relation("question_multipleChoiceQuestionChoice")
  updatedAt    DateTime                       @updatedAt
  createdAt    DateTime                       @default(now())
  baseQuestion Question?                      @relation("question_multipleChoiceQuestion")
}

model MultipleChoiceQuestionChoice {
  id         String                         @id @default(uuid())
  choice     String
  question   MultipleChoiceQuestion         @relation(name: "question_multipleChoiceQuestionChoice", fields: [questionId], references: [id])
  questionId String
  correct    Boolean                        @default(false)
  updatedAt  DateTime                       @updatedAt
  createdAt  DateTime                       @default(now())
  answers    MultipleChoiceQuestionAnswer[]

  @@unique([correct, questionId])
}

model ProgrammingQuestion {
  id                                 String                            @id @default(uuid())
  title                              String
  statementMrkdwn                    String
  statementCompiled                  String
  programmingQuestionType            ProgrammingQuestionType
  singleFileProgrammingQuestion      SingleFileProgrammingQuestion?    @relation(name: "question_singleFileProgrammingQuestion", fields: [singleFileProgrammingQuestionId], references: [id])
  singleFileProgrammingQuestionId    String?                           @unique
  multipleFilesProgrammingQuestion   MultipleFilesProgrammingQuestion? @relation(name: "question_multipleFilesProgrammingQuestion", fields: [multipleFilesProgrammingQuestionId], references: [id])
  multipleFilesProgrammingQuestionId String?                           @unique
  baseQuestion                       Question?                         @relation("question_programmingQuestion")
  evaluationCriterias                EvaluationCriteria[]              @relation("programmingQuestion_evaluationCriteria")
  practice                           PracticeProgrammingQuestion?      @relation("question_practiceProgrammingQuestion")
  updatedAt                          DateTime                          @updatedAt
  createdAt                          DateTime                          @default(now())
}

enum ProgrammingQuestionType {
  SINGLE_FILE
  MULTIPLE_FILE
}

model SingleFileProgrammingQuestion {
  id                      String               @id @default(uuid())
  baseProgrammingQuestion ProgrammingQuestion? @relation("question_singleFileProgrammingQuestion")
  defaultCode             String
  allowedLanguages        Language[]
}

model MultipleFilesProgrammingQuestion {
  id                      String               @id @default(uuid())
  language                Language             @relation(fields: [languageId], references: [id])
  baseProgrammingQuestion ProgrammingQuestion? @relation("question_multipleFilesProgrammingQuestion")
  defaultFiles            File[]
  languageId              String
}

model EvaluationCriteria {
  id                    String                         @id @default(uuid())
  name                  String
  type                  EvaluationCriteriaType
  totalPoints           Int
  inputOutputEvalCrit   InputOutputEvaluationCriteria? @relation(name: "evaluationCriteria_inputOutputEvaluationCriteria", fields: [inputOutputEvalCritId], references: [id])
  inputOutputEvalCritId String?
  requiredToPass        Boolean                        @default(false)
  programmingQuestion   ProgrammingQuestion            @relation(fields: [programmingQuestionId], references: [id], name: "programmingQuestion_evaluationCriteria")
  programmingQuestionId String
  hidden                Boolean                        @default(false)
  updatedAt             DateTime                       @updatedAt
  createdAt             DateTime                       @default(now())
  results               EvaluationResult[]             @relation("evaluationCriteria_evaluationResult")
}

enum EvaluationCriteriaType {
  MANUAL
  INPUT_OUTPUT
  PLAG_CHECK
}

model InputOutputEvaluationCriteria {
  id           String               @id @default(uuid())
  inputs       String[]
  outputs      String[]
  baseCriteria EvaluationCriteria[] @relation("evaluationCriteria_inputOutputEvaluationCriteria")
  updatedAt    DateTime             @updatedAt
  createdAt    DateTime             @default(now())
}

// -------------------------------------
// --- ASSESSMENT-SUBMISSION RELATED ---
// -------------------------------------
model AssessmentAnswer {
  user                 User             @relation(fields: [userId], references: [id])
  userId               String
  assessment           Assessment       @relation(fields: [assessmentId], references: [id])
  assessmentId         String
  reviewed             Boolean          @default(false)
  questionsSubmissions QuestionAnswer[]
  submittedAt          DateTime?
  updatedAt            DateTime         @updatedAt
  createdAt            DateTime         @default(now())
  recPoints            Int?

  @@id([assessmentId, userId])
}

model QuestionAnswer {
  id                             String                        @id @default(uuid())
  question                       Question                      @relation(fields: [questionId], references: [id], name: "question_submission")
  questionId                     String
  multipleChoiceQuestionAnswer   MultipleChoiceQuestionAnswer? @relation(name: "multipleChoiceQuestionAnswer_submission", fields: [multipleChoiceQuestionAnswerId], references: [id])
  multipleChoiceQuestionAnswerId String?                       @unique
  programmingQuestionAnswer      ProgrammingQuestionAnswer?    @relation(name: "programmingQuestionAnswer_submission", fields: [programmingQuestionAnswerId], references: [id])
  programmingQuestionAnswerId    String?                       @unique
  updatedAt                      DateTime                      @updatedAt
  createdAt                      DateTime                      @default(now())
  assessmentSubmission           AssessmentAnswer?             @relation(fields: [assessmentSubmissionId, userId], references: [assessmentId, userId])
  assessmentSubmissionId         String?
  points                         Int?
  userId                         String?

  @@unique([userId, questionId])
  @@unique([questionId, multipleChoiceQuestionAnswerId, programmingQuestionAnswerId])
}

model MultipleChoiceQuestionAnswer {
  id               String                       @id @default(uuid())
  questionChoice   MultipleChoiceQuestionChoice @relation(fields: [questionChoiceId], references: [id])
  questionChoiceId String
  baseAnswer       QuestionAnswer?              @relation("multipleChoiceQuestionAnswer_submission")
}

model ProgrammingQuestionAnswer {
  id                String             @id @default(uuid())
  baseAnswer        QuestionAnswer?    @relation("programmingQuestionAnswer_submission")
  envirnment        Environment        @relation(fields: [envirnmentId], references: [id], name: "envirnment_programmingQuestionAnswer")
  envirnmentId      String             @unique
  evaluationResults EvaluationResult[]
}

model EvaluationResult {
  id                            String                       @id @default(uuid())
  evaluationCriteria            EvaluationCriteria           @relation(fields: [evaluationCriteriaId], references: [id], name: "evaluationCriteria_evaluationResult")
  evaluationCriteriaId          String
  evaulationPoints              Float
  inputOutputEvaulationResult   InputOutputEvaluationResult? @relation(fields: [inputOutputEvaluationResultId], references: [id])
  inputOutputEvaluationResultId String?                      @unique
  updatedAt                     DateTime                     @updatedAt
  createdAt                     DateTime                     @default(now())
  programmingQuestionAnswer     ProgrammingQuestionAnswer    @relation(fields: [programmingQuestionAnswerId], references: [id])
  programmingQuestionAnswerId   String
}

model InputOutputEvaluationResult {
  id                   String            @id @default(uuid())
  resultOutputs        String[]
  baseEvaluationResult EvaluationResult?
}

// ------------------------
// --- PRACTICE RELATED ---
// ------------------------
model PracticeProgrammingQuestion {
  id          String              @id @default(uuid())
  questionId  String              @unique
  diffculty   Difficulty
  question    ProgrammingQuestion @relation(fields: [questionId], references: [id], name: "question_practiceProgrammingQuestion")
  classroom   Classroom?          @relation(fields: [classroomId], references: [id])
  classroomId String?
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

// ---------------------------
// --- PROGRAMMING RELATED ---
// ---------------------------
model Language {
  id                  String                          @id @default(uuid())
  name                String                          @unique
  extension           String                          @unique
  singleFileQuestions SingleFileProgrammingQuestion[]
  createdAt           DateTime                        @default(now())
  updatedAt           DateTime                        @updatedAt

  MultipleFilesProgrammingQuestion MultipleFilesProgrammingQuestion[]
  @@index([name, extension])
}

model File {
  id                               String                             @id @default(uuid())
  name                             String
  data                             String
  updatedAt                        DateTime                           @updatedAt
  createdAt                        DateTime                           @default(now())
  multipleFilesProgrammingQuestion MultipleFilesProgrammingQuestion[]
  environment                      Environment?                       @relation(name: "environment_files", fields: [environmentId], references: [id])
  environmentId                    String?

  @@index([name])
}

model Environment {
  id             String                      @id @default(uuid())
  files          File[]                      @relation("environment_files")
  scratchPadData String
  submitted      Boolean                     @default(false)
  createdAt      DateTime                    @default(now())
  updatedAt      DateTime                    @updatedAt
  answers        ProgrammingQuestionAnswer[] @relation("envirnment_programmingQuestionAnswer")
  permissions    EnvironmentPermission[]
}

model EnvironmentPermission {
  user          User                       @relation(fields: [userId], references: [id])
  userId        String
  environment   Environment                @relation(fields: [environmentId], references: [id])
  environmentId String
  permission    EnvironmentPermissionLevel
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt

  @@unique([environmentId, userId])
}

enum EnvironmentPermissionLevel {
  OWNER
  READ_WRITE
  READ
}

// ---------------------------
// --- COMPETITION RELATED ---
// ---------------------------
model Competition {
  id            String                   @id @default(uuid())
  isPrivate     Boolean                  @default(false)
  assessment    Assessment?
  creatorUser   User                     @relation(fields: [creatorUserId], references: [id])
  creatorUserId String
  participants  CompetitionParticipant[]
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
}

model CompetitionParticipant {
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  competition   Competition @relation(fields: [competitionId], references: [id])
  competitionId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@id([competitionId, userId])
}
